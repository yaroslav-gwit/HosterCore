package cmd

import (
	"encoding/json"
	"errors"
	"log"
	"os"
	"text/template"

	"github.com/spf13/cobra"
)

var (
	jailStartCmd = &cobra.Command{
		Use:   "start",
		Short: "Start a specific Jail",
		Long:  `Start a specific Jail using it's name`,
		Args:  cobra.ExactArgs(1),
		Run: func(cmd *cobra.Command, args []string) {
			err := checkInitFile()
			if err != nil {
				log.Fatal(err.Error())
			}
			// cmd.Help()

			err = jailStart(args[0])
			if err != nil {
				log.Fatal(err.Error())
			}
		},
	}
)

func jailStart(jailName string) error {
	if !checkIfJailExists(jailName) {
		return errors.New("jail doesn't exist")
	}

	datasets, err := getZfsDatasetInfo()
	if err != nil {
		return err
	}

	configFile := ""
	for _, v := range datasets {
		if FileExists(v.MountPoint + "/" + jailName + "/jail_config.json") {
			configFile = v.MountPoint + "/" + jailName + "/jail_config.json"
		}
	}

	configFileRead, err := os.ReadFile(configFile)
	if err != nil {
		return err
	}

	jailConfig := JailConfigFileStruct{}
	unmarshalErr := json.Unmarshal(configFileRead, &jailConfig)
	if unmarshalErr != nil {
		return unmarshalErr
	}

	t, err := template.New("jailRunningConfigPartialTemplate").Parse(jailRunningConfigPartialTemplate)
	if err != nil {
		return err
	}

	err = t.Execute(os.Stdout, jailRunningConfigPartialTemplate)
	if err != nil {
		return err
	}

	return nil
}

const jailRunningConfigPartialTemplate = `# Running Jail config generated by Hoster
{{ .JailName }} {
    host.hostname = {{ .JailName }};
    ip4.addr = "vm-{{ .NetworkName }}|{{ .IPAddress }}/{{ .Netmask }}";
    path = "{{ .JailRootPath }}";
    exec.clean;
    exec.start = "{{ .StartupScript }}";
    exec.stop = "{{ .ShutdownScript }}";
	# Additional config
`

func checkIfJailExists(jailName string) (jailExists bool) {
	datasets, err := getZfsDatasetInfo()
	if err != nil {
		return
	}

	for _, v := range datasets {
		if FileExists(v.MountPoint + "/" + jailName + "/jail_config.json") {
			return true
		}
	}

	return
}
