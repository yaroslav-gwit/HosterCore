

func initializeHaCluster() {
	hosterNode := HosterHaNodeStruct{}
	hosterNode.IsCandidate = false
	hosterNode.IsWorker = false
	hosterNode.IsManager = true
	hosterNode.LastPing = 9223372036854770000
	hosterNode.NodeInfo = haConfig.Manager
	hosterNode.NodeInfo.FailOverStrategy = haConfig.FailOverStrategy
	hosterNode.NodeInfo.FailOverTime = haConfig.FailOverTime

	haChannelAdd <- hosterNode
}

func joinClusterManager() {
	for {
		if iAmRegisteredWithManager {
			time.Sleep(time.Second * 5)
			continue
		}
		user := "admin"
		password := "123456"
		port := 3000

		portEnv := os.Getenv("REST_API_PORT")
		userEnv := os.Getenv("REST_API_USER")
		passwordEnv := os.Getenv("REST_API_PASSWORD")

		var err error
		if len(portEnv) > 0 {
			port, err = strconv.Atoi(portEnv)
			if err != nil {
				log.Fatal("please make sure port is an integer!")
			}
		}
		if len(userEnv) > 0 {
			user = userEnv
		}
		if len(passwordEnv) > 0 {
			password = passwordEnv
		}

		host := NodeStruct{}
		host.Hostname = cmd.GetHostName()
		host.FailOverStrategy = "cireset"
		host.User = user
		host.Password = password
		host.Port = strconv.Itoa(port)
		host.Protocol = "http"
		host.FailOverStrategy = haConfig.FailOverStrategy
		host.FailOverTime = haConfig.FailOverTime

		jsonPayload, _ := json.Marshal(host)
		payload := strings.NewReader(string(jsonPayload))

		url := haConfig.Manager.Protocol + "://" + haConfig.Manager.Address + ":" + haConfig.Manager.Port + "/api/v1/ha/register"
		req, _ := http.NewRequest("POST", url, payload)
		auth := haConfig.Manager.User + ":" + haConfig.Manager.Password
		authEncoded := base64.StdEncoding.EncodeToString([]byte(auth))
		req.Header.Add("Content-Type", "application/json")
		req.Header.Add("Authorization", "Basic "+authEncoded)

		for {
			res, err := http.DefaultClient.Do(req)
			if err != nil {
				_ = exec.Command("logger", "-t", "HOSTER_HA_REST", "Could not join the manager: "+err.Error()).Run()
				time.Sleep(time.Second * 30)
				continue
			}

			defer res.Body.Close()
			body, _ := io.ReadAll(res.Body)

			if !initialRegistrationPerformed {
				_ = exec.Command("logger", "-t", "HOSTER_HA_REST", "Successfully joined the cluster: "+string(body)).Run()
			} else {
				_ = exec.Command("logger", "-t", "HOSTER_HA_REST", "Successfully restored the connection to the cluster manager: "+string(body)).Run()
			}

			iAmRegisteredWithManager = true
			initialRegistrationPerformed = true
			lastManagerContact = time.Now().Unix()

			break
		}
	}
}











func iAmWorkerOnline() {
	for {
		managerOffline := time.Now().Unix() > lastManagerContact+haConfig.FailOverTime
		candidateZeroOffline := time.Now().Unix() > lastCandidate0Contact+haConfig.FailOverTime
		candidateOneOffline := time.Now().Unix() > lastCandidate1Contact+haConfig.FailOverTime
		if initialRegistrationPerformed {
			if (managerOffline && candidateZeroOffline) || (managerOffline && candidateOneOffline) || (candidateZeroOffline && candidateOneOffline) {
				_ = exec.Command("logger", "-t", "HOSTER_HA_REST", "Could not reach cluster manager and one of the candidates for "+strconv.Itoa(int(haConfig.FailOverTime))+" seconds, exiting the process").Run()
				os.Exit(1)
			}
		}
		time.Sleep(time.Second * 5)
	}
}

func iAmManagerOnline() {
	for iAmManager {
		candidateZeroOffline := time.Now().Unix() > lastCandidate0Contact+haConfig.FailOverTime
		candidateOneOffline := time.Now().Unix() > lastCandidate1Contact+haConfig.FailOverTime
		if candidateZeroOffline && candidateOneOffline {
			_ = exec.Command("logger", "-t", "HOSTER_HA_REST", "Could not reach cluster candidates for "+strconv.Itoa(int(haConfig.FailOverTime))+" seconds, exiting the process").Run()
			os.Exit(1)
		}
		time.Sleep(time.Second * 5)
	}
}

func iAmCandidateOnline() {
	for {
		if iAmCandidate {
			var otherCandidateOffline bool
			if cmd.GetHostName() == haConfig.Candidates[0].Hostname {
				otherCandidateOffline = time.Now().Unix() > lastCandidate1Contact+haConfig.FailOverTime
			}
			if cmd.GetHostName() == haConfig.Candidates[1].Hostname {
				otherCandidateOffline = time.Now().Unix() > lastCandidate0Contact+haConfig.FailOverTime
			}
			managerOffline := time.Now().Unix() > lastManagerContact+haConfig.FailOverTime

			if otherCandidateOffline && managerOffline {
				_ = exec.Command("logger", "-t", "HOSTER_HA_REST", "Could not reach other cluster candidates for "+strconv.Itoa(int(haConfig.FailOverTime))+" seconds, exiting the process").Run()
				os.Exit(1)
			}
			time.Sleep(time.Second * 5)
		}
	}
}

func managerTemporaryFailover() {
	for {
		if iAmCandidate {
			var otherCandidateOffline bool
			if cmd.GetHostName() == haConfig.Candidates[0].Hostname {
				otherCandidateOffline = time.Now().Unix() > lastCandidate1Contact+haConfig.FailOverTime
			}
			if cmd.GetHostName() == haConfig.Candidates[1].Hostname {
				otherCandidateOffline = time.Now().Unix() > lastCandidate0Contact+haConfig.FailOverTime
			}
			managerOffline := time.Now().Unix() > lastManagerContact+haConfig.FailOverTime

			if !otherCandidateOffline && managerOffline {
				_ = exec.Command("logger", "-t", "HOSTER_HA_REST", "Could not reach our manager for "+strconv.Itoa(int(haConfig.FailOverTime))+", I am the manager now").Run()
				iAmManager = true
			} else {
				iAmManager = false
			}

			time.Sleep(time.Minute * 1)
		}
	}
}