package osfreebsd

import (
	"errors"
	"os/exec"
	"strconv"
	"strings"
)

const (
	KillSignalHUP  = "HUP"  // kill signal 1 - hang up, CAN be trapped
	KillSignalINT  = "INT"  // kill signal 2 - interrupt, CAN be trapped
	KillSignalQUIT = "QUIT" // kill signal 3 - quit, CAN be trapped
	KillSignalABRT = "ABRT" // kill signal 6 - abort
	KillSignalKILL = "KILL" // kill signal 9 - non-catchable, non-ignorable kill
	KillSignalALRM = "ALRM" // kill signal 14 - alarm, CAN be trapped
	KillSignalTERM = "TERM" // kill signal 15 - software termination signal, CAN be trapped
)

// Sends a specific kill signal to the process id of your choice.
//
// Returns an error if something went wrong (both the shell error string and an exit code).
func KillProcess(signalName string, processId int) error {
	if signalName == KillSignalHUP {
		_ = 0
	} else if signalName == KillSignalINT {
		_ = 0
	} else if signalName == KillSignalQUIT {
		_ = 0
	} else if signalName == KillSignalABRT {
		_ = 0
	} else if signalName == KillSignalKILL {
		_ = 0
	} else if signalName == KillSignalALRM {
		_ = 0
	} else if signalName == KillSignalTERM {
		_ = 0
	} else {
		errorString := "your kill signal must exist within the kill signal constants"
		return errors.New(errorString)
	}

	out, err := exec.Command("/bin/kill", "-s", signalName, strconv.Itoa(processId)).CombinedOutput()
	if err != nil {
		errorString := strings.TrimSpace(string(out)) + "; " + err.Error()
		return errors.New(errorString)
	}

	return nil
}

// Few more "trappable" kill signals (in case we need to add more in the future):
/*
   SIGHUP (1):
   Sent to a process when its controlling terminal is closed or when the controlling process (session leader) exits.

   SIGINT (2):
   Interrupt signal. Typically generated by pressing Ctrl+C in the terminal. It's often used to request that a process terminate.

   SIGQUIT (3):
   Quit signal. Similar to SIGINT but provides a core dump of the process.

   SIGTERM (15):
   Termination signal. It requests that a process terminate. This is a more graceful way of asking a process to stop compared to SIGKILL.

   SIGKILL (9):
   Kill signal. This signal cannot be trapped or ignored. It forcefully terminates a process.

   SIGUSR1 (10):
   User-defined signal 1. It can be used for custom actions in a program.

   SIGUSR2 (12):
   User-defined signal 2. Similar to SIGUSR1, it can be used for custom actions in a program.

   SIGPIPE (13):
   Pipe signal. Sent to a process when it attempts to write to a pipe that has no reader.

   SIGALRM (14):
   Alarm clock signal. It is often used to schedule an alarm to be delivered to a process.

   SIGCHLD (17):
   Child status changed signal. Sent to the parent process when a child process exits.

   SIGCONT (18):
   Continue signal. Used to resume a process that has been stopped (e.g., by SIGSTOP).

   SIGSTOP (19):
   Stop signal. Pauses the execution of a process.

   SIGTSTP (20):
   Terminal stop signal. Similar to SIGSTOP but initiated by the terminal (e.g., Ctrl+Z).

   SIGTTIN (21):
   Background read from a TTY signal. Sent to a background process attempting to read from its controlling terminal.

   SIGTTOU (22):
   Background write to a TTY signal. Sent to a background process attempting to write to its controlling terminal.
*/
